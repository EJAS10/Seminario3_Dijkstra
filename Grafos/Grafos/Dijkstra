using System;
using System.Collections.Generic;
namespace Grafos
{
    class Program
    {
        static void Main(string[] args)
        {
            
        }
        private static void AlgoritmoDijksra(int inicio, int final)//recibe por parametro el nodo de inicio y el nodo final
        {

            int distancia = 0;//distancia entre los nodos
            int n = 0; //variable de apoyo
            int cantNodos = 7;//cantidad de nodos del grafo
            int actual = 0;// variable de apoyo para marcar el nodo en que se encuentra
            int columna = 0;

            //creacion del grafo
            Grafos grafos = new Grafos(cantNodos);
            grafos.AddArista(0, 1, 2);// primer nodo/ segundo nodo/ peso de la arista
            grafos.AddArista(0, 3, 1);
            grafos.AddArista(1, 3, 3);
            grafos.AddArista(1, 4, 10);
            grafos.AddArista(2, 0, 4); 
            grafos.AddArista(2, 5, 5);
            grafos.AddArista(3, 2, 2);
            grafos.AddArista(3, 4, 2);
            grafos.AddArista(3, 5, 8);
            grafos.AddArista(3, 6, 4);
            grafos.AddArista(4, 6, 6);
            grafos.AddArista(6, 5, 1);

            grafos.Show();//muestra el estado inicial del grafo
            


            /*a continuacion se crea la tabla
            0 visitado
            1 distancia
            2 previo
             */

            int[,] tabla = new int[cantNodos, 3];

            //inicio de la tabla
            for (n = 0; n < cantNodos; n++)
            {
                tabla[n, 0] = 0;
                tabla[n, 1] = int.MaxValue;
                tabla[n, 2] = 0;
            }
            tabla[inicio, 1] = 0;//el nodo del que partimos tiene un peso de cero


            MostrarTabla(tabla);

            //Dijkstra
            actual = inicio;//actual toma el valor de inicio para empezar a recorrer el grafo

            do
            {
                //marcar el nodo como visitado
                tabla[actual, 0] = 1;
                for(columna=0; columna<cantNodos; columna++)
                {
                    //a quien se dirige
                    if(grafos.ObtenerAdyacencia(actual,columna) != 0)
                    {
                        //distancia 
                        distancia = grafos.ObtenerAdyacencia(actual, columna) + tabla[actual, 1];
                        if (distancia < tabla[columna, 1])
                        {
                            tabla[columna, 1] = distancia;

                            //colocamos la informacion de origen padre
                            tabla[columna, 2] = actual;
                        } 
                    }
                }

                //el nuevo nuevo actual es el metodo con la menor distancia que no ha sido visitado
                int indiceMenor = -1;
                int distanciamenor = int.MaxValue;

                for (int x = 0; x< cantNodos; x++)
                {
                    if (tabla[x, 1]< distanciamenor && tabla[x, 0] == 0)
                    {
                        indiceMenor = x;
                        distanciamenor = tabla[x, 1];
                    }
                }
                actual = indiceMenor;
            } while(actual != -1);

            MostrarTabla(tabla);

            //Ruta mas corta
            List<int> ruta = new List<int>();
            int nodo= final;
            while (nodo != inicio)
            {
                ruta.Add(nodo);
                nodo = tabla[nodo, 2];
            }
            ruta.Add(inicio);

            ruta.Reverse();
            Console.WriteLine("\nRuta mas corta es: ");
            foreach (int posicion in ruta)
                Console.Write($"{posicion}->");

            Console.WriteLine();
        }
        public static void MostrarTabla(int [,] pTabla)//metodo para mostrar la tabla de dijkstra
        {
           
            for (int n=0; n< pTabla.GetLength(0); n++)
            {
                Console.WriteLine($"{n}-> {pTabla[n,0]}\t{pTabla[n,1]}\t{pTabla[n,2]}");
            }
            Console.WriteLine("----------------");
        }

        
       
    }//fin de la clase Program////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    class Grafos
    {
        int [,] Adyacencia;
        int nodo;
        public Grafos(int pNodo)
        {
            nodo = pNodo;

            Adyacencia = new int[nodo, nodo];

            

        }
        public void AddArista(int nInicial, int nFinal) 
        {
            Adyacencia[nInicial, nFinal] = 1;

        }
        public void AddArista(int nInicial,int nFinal, int peso) 
        {
            Adyacencia[nInicial, nFinal]= peso;
        }

        public void Show()
        {
            int col=0;
            int fil=0;

            Console.ForegroundColor = ConsoleColor.Red;
            for(col=0; col<nodo; col++)
            {
                Console.Write($"\t     {col}");
            }
            Console.WriteLine();

            for(col=0; col< nodo; col++)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write($"\t{col}");
                for(fil=0; fil<nodo; fil++)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.Write($"\t{Adyacencia[col,fil]}");
                }
                Console.WriteLine();
            }
        }
        public int ObtenerAdyacencia(int pFila, int pColumna)
        {
            return Adyacencia[pFila, pColumna];
        }

    }//fin de la clase Grafos///////////////////////////////////////////////////////////////////////////////////////////////////////
}
